#import "lib/lib.typ": *
#show: chapter-style.with(title: "动态规划", info: info-algo)

= 动态规划
<动态规划>

动态规划，是一种有限状态自动机，通过空间换取时间，利用内存的缓存能力，换取 CPU 的计算消耗。动态规划可看作一种有向无环图（DAG）

- 有起始节点和终止节点
- 每个节点代表一种状态
- 每条边代表一种关系
- 状态转移：任何一个非起始节点，均可从其他节点转移过来

以下情况是搜索问题，而非动态规划问题：

- 所有状态没有形成环
- 数据量过大，$n ≥ 10^5$（暴力搜索）- 状态数$×$状态转移 ≥ $10^6$

== 主要策略

动态规划的关键就是如何设计合理的状态

- 设计状态
- 确定状态转移方程
- 确定初始状态
- 执行状态转移
- 计算最终解

状态可储存于 Hash 表。

== 线性状态转移

= 递归类

- 特点：结果->边界。
- 适用

== 流程

- 递推式的前 2 个值，$f[0]$和$f[1]$
- 遍历递推式，$f[i] = F(f[i - 1], f[i - 2])$
- 返回$f[n]$

#tip[
  函数$F$可能是连续运算，如`+`，`-`，也可能是离散运算，如`min`；
]

= 01背包问题
<01背包问题>

- 特点：边界->结果。
- 适用：

== 流程

- 表格化
- 确定边界和遍历顺序
- 找到遍历方程
